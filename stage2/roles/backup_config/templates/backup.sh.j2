#!/bin/sh

. /cron_env.sh

DATETIME=$(date +%Y%m%d_%H%M%S)
echo "Starting backup at ${DATETIME}"

if [ "${BAHMNI_SERVER_MODE}" != "active" ]; then
  echo "Skipping backup, mode ${BAHMNI_SERVER_MODE} is not equal to active."
  exit 0
fi

BAHMNI_BACKUP_ENC_KEY="$(head -1 ${BAHMNI_ENC_FILE_PATH})"

ZIP7=/usr/bin/7za
TAR=/bin/tar
RM=/bin/rm

DAY=$(date +%Y-%m-%d)
TIME=$(date +%H%M%S)

BACKUP_DIR="{{ bahmni_backup_dir }}/backups"
DAY_DIR_NAME="${BACKUP_DIR}/${HOSTNAME}-${DAY}"
TIME_DIR_NAME="${DAY_DIR_NAME}/${TIME}"

mkdir -p ${TIME_DIR_NAME}

mysqldump -uroot -ppassword --default-character-set=utf8 --add-drop-database --all-databases --routines --single-transaction --quick --add-locks --disable-keys --extended-insert -r ${TIME_DIR_NAME}/mysql_backup_$DATETIME.sql

# Restore with 
#   gunzip -c <file>.sql | psql -Uclinlims --single-transaction postgres
# the final "postgres" specifies the first database to restore which should
# be the administrative postgres database.
pg_dumpall --clean --oids --quote-all-identifiers -Uclinlims > ${TIME_DIR_NAME}/postgresql_backup_$DATETIME.sql

sed -i 's/\(DROP DATABASE "clinlims"\);/\1 CASCADE;\nDROP SCHEMA "clinlims CASCADE;/' ${TIME_DIR_NAME}/postgresql_backup_$DATETIME.sql

$TAR -cf ${TIME_DIR_NAME}/homebahmni_$DATETIME.tar -C / home/bahmni

$TAR -cf ${TIME_DIR_NAME}/bahmni_config_$DATETIME.tar -C / \
  var/www/bahmni_config #\
  #opt/bahmni-web \
  #opt/bahmni-lab \
  #opt/bahmni-lab-connect \
  #opt/openmrs \
  #opt/bahmni-reports \
  #opt/bahmni-implementer-interface \
  #opt/atomfeed-console

# https://sevenzip.osdn.jp/chm/cmdline/switches/method.htm
$ZIP7 a -t7z -m0=lzma2 -ms=on -bd -mx=9 -sdel -ssw -p"${BAHMNI_BACKUP_ENC_KEY}" -mhe=on "${DAY_DIR_NAME}.7z" "${DAY_DIR_NAME}"

$RM -rf "${DAY_DIR_NAME}/"

